{"version":3,"sources":["../src/utils/dom.js","../src/Mask.js","../src/utils/orientation.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/lit-extended.js","../src/defaults.js","../src/TourBox.js","../src/Tour.js","index.js"],"names":["createElement","setCanvasDimensions","tagName","css","el","document","setAttribute","body","appendChild","canvas","width","height","style","Mask","alpha","MASK_CSS","initCanvas","target","targetRect","getBoundingClientRect","bodyRect","refill","createHoleAtPosition","x","y","clearFill","resizeCanvasToFillBody","ctx","getContext","fill","fillStyle","fillRect","position","clearRect","horizontalCenter","rect","verticalCenter","defaultTemplateFactory","render","templateCaches","Map","html","strings","values","TemplateResult","svg","SVGTemplateResult","constructor","type","partCallback","defaultPartCallback","getHTML","l","length","isTextBinding","i","s","closing","findTagClose","nodeMarker","marker","getTemplateElement","template","innerHTML","content","svgElement","firstChild","removeChild","reparentNodes","result","templateCache","get","undefined","set","Template","container","templateFactory","instance","__templateInstance","_partCallback","update","TemplateInstance","fragment","_clone","removeNodes","String","Math","random","slice","markerRegex","RegExp","lastAttributeNameRegex","str","close","lastIndexOf","open","indexOf","TemplatePart","index","name","rawName","isTemplatePartActive","part","element","parts","walker","createTreeWalker","partIndex","nodesToRemove","previousNode","currentNode","nextNode","node","nodeType","hasAttributes","attributes","count","value","stringForPart","attributeNameInPart","exec","attribute","getNamedItem","stringsForAttributeValue","split","push","removeAttribute","nodeValue","parent","parentNode","lastIndex","insertBefore","createComment","createTextNode","previousSibling","Node","TEXT_NODE","nextSibling","n","getValue","isDirective","noChange","directive","f","__litDirective","o","directiveValue","isPrimitiveValue","AttributePart","size","_previousValues","_interpolate","startIndex","text","v","Array","isArray","Symbol","iterator","t","_equalToPreviousValues","setValue","join","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","_setNode","then","_setPromise","_insert","clear","textContent","_getTemplate","itemParts","item","itemPart","itemStart","previousPart","lastPart","templatePart","Error","getTemplate","_parts","valueIndex","cloneNode","partActive","start","end","before","extendedPartCallback","substr","eventName","EventPart","lastChar","BooleanAttributePart","PropertyPart","listener","_listener","removeEventListener","addEventListener","handleEvent","event","call","DEFAULT_TEMPLATE","data","eventHandlers","orientation","boxCSS","closeButtonCSS","title","previous","next","DEFAULT_WRAPPER_CSS","arrowCSS","COLOR","TourBox","tour","wrapperCSS","offsetX","offsetY","stop","bind","nextStep","previousStep","wrapper","remove","left","top","wrapperRect","baseX","baseY","calculateRelativeShift","horizontalShift","verticalShift","newX","newY","goToPosition","newWrapperRect","console","log","goToElement","Tour","steps","config","forEach","step","querySelector","mask","tourBox","currentStep","window","displayCurrentStep","after","displayStep","Promise","resolve","reject","promiseResolve","promiseReject","done","cleanup","myTour","canExit","module","hot","dispose","accept"],"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","file":"example.fd1d8b81.map","sourceRoot":"../example","sourcesContent":["export function createElement(tagName, css){\n  // Create the element\n  let el = document.createElement(tagName);\n\n  // Apply any styles (if provided)\n  if(css) el.setAttribute('style', css)\n\n  // Append the element to the body\n  document.body.appendChild(el);\n  \n  return el;\n}\n\nexport function setCanvasDimensions(canvas, width, height){\n  // Set the CSS width and height\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n\n  // Set the canvas' internal width and height\n  canvas.width = width;\n  canvas.height = height;\n}","import {createElement, setCanvasDimensions} from './utils/dom'\n\nexport default class Mask {\n  MASK_CSS = `\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    z-index: 99999999999999;\n  `;\n\n  constructor({alpha}) {\n    this.alpha = alpha;\n    this.initCanvas();\n  }\n\n  mask(target){\n    let targetRect = target.getBoundingClientRect();\n    let bodyRect = document.body.getBoundingClientRect();\n\n    this.refill()\n\n    this.createHoleAtPosition({\n      x: targetRect.x - bodyRect.x,\n      y: targetRect.y - bodyRect.y,\n      width: targetRect.width,\n      height: targetRect.height\n    })\n  }\n\n\n  cleanup(){\n    this.clearFill()\n  }\n\n  initCanvas() {\n    // Create a canvas spanning the whole body\n    this.canvas = createElement('canvas', this.MASK_CSS);\n    this.resizeCanvasToFillBody();\n    \n    // Get the context\n    this.ctx = this.canvas.getContext(\"2d\");\n  }\n\n  resizeCanvasToFillBody(){\n    let bodyRect = document.body.getBoundingClientRect();\n    setCanvasDimensions(this.canvas, bodyRect.width, bodyRect.height)\n  }\n\n  refill(){\n    this.clearFill()\n    this.fill()\n  }\n\n  fill() {\n    this.ctx.fillStyle = `rgba(0,0,0,${this.alpha})`;\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  createHoleAtPosition(position) {\n    this.ctx.clearRect(position.x, position.y, position.width, position.height);\n  }\n\n  clearFill(){\n    this.createHoleAtPosition({x: 0, y: 0, width: this.canvas.width, height: this.canvas.height})\n  }\n}","export let horizontalCenter = rect => rect.width / 2;\nexport let verticalCenter = rect => rect.height / 2;","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html');\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, partCallback = defaultPartCallback) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.partCallback = partCallback;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            // We're in a text position if the previous string closed its tags.\n            // If it doesn't have any tags, then we use the previous text position\n            // state.\n            const closing = findTagClose(s);\n            isTextBinding = closing > -1 ? closing < s.length : isTextBinding;\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function defaultTemplateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n/**\n * Finds the closing index of the last closed HTML tag.\n * This has 3 possible return values:\n *   - `-1`, meaning there is no tag in str.\n *   - `string.length`, meaning the last opened tag is unclosed.\n *   - Some positive number < str.length, meaning the index of the closing '>'.\n */\nfunction findTagClose(str) {\n    const close = str.lastIndexOf('>');\n    const open = str.indexOf('<', close + 1);\n    return open > -1 ? str.length : close;\n}\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const content = this.element.content;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                // Per https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                // attributes are not guaranteed to be returned in document order. In\n                // particular, Edge/IE can return them out of order, so we cannot assume\n                // a correspondance between part index and attribute index.\n                let count = 0;\n                for (let i = 0; i < attributes.length; i++) {\n                    if (attributes[i].value.indexOf(marker) >= 0) {\n                        count++;\n                    }\n                }\n                while (count-- > 0) {\n                    // Get the template literal section leading up to the first\n                    // expression in this attribute\n                    const stringForPart = result.strings[partIndex];\n                    // Find the attribute name\n                    const attributeNameInPart = lastAttributeNameRegex.exec(stringForPart)[1];\n                    // Find the corresponding attribute\n                    // TODO(justinfagnani): remove non-null assertion\n                    const attribute = attributes.getNamedItem(attributeNameInPart);\n                    const stringsForAttributeValue = attribute.value.split(markerRegex);\n                    this.parts.push(new TemplatePart('attribute', index, attribute.name, attributeNameInPart, stringsForAttributeValue));\n                    node.removeAttribute(attribute.name);\n                    partIndex += stringsForAttributeValue.length - 1;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue.indexOf(marker) < 0) {\n                    continue;\n                }\n                const parent = node.parentNode;\n                const strings = nodeValue.split(markerRegex);\n                const lastIndex = strings.length - 1;\n                // We have a part for each match found\n                partIndex += lastIndex;\n                // Generate a new text node for each literal section\n                // These nodes are also used as the markers for node parts\n                for (let i = 0; i < lastIndex; i++) {\n                    parent.insertBefore((strings[i] === '')\n                        ? document.createComment('')\n                        : document.createTextNode(strings[i]), node);\n                    this.parts.push(new TemplatePart('node', index++));\n                }\n                parent.insertBefore(strings[lastIndex] === '' ?\n                    document.createComment('') :\n                    document.createTextNode(strings[lastIndex]), node);\n                nodesToRemove.push(node);\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === marker) {\n                const parent = node.parentNode;\n                // Add a new marker node to be the startNode of the Part if any of the\n                // following are true:\n                //  * We don't have a previousSibling\n                //  * previousSibling is being removed (thus it's not the\n                //    `previousNode`)\n                //  * previousSibling is not a Text node\n                //\n                // TODO(justinfagnani): We should be able to use the previousNode here\n                // as the marker node and reduce the number of extra nodes we add to a\n                // template. See https://github.com/PolymerLabs/lit-html/issues/147\n                const previousSibling = node.previousSibling;\n                if (previousSibling === null || previousSibling !== previousNode ||\n                    previousSibling.nodeType !== Node.TEXT_NODE) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a nextSibling add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a new marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\n/**\n * Returns a value ready to be inserted into a Part from a user-provided value.\n *\n * If the user value is a directive, this invokes the directive with the given\n * part. If the value is null, it's converted to undefined to work better\n * with certain DOM APIs, like textContent.\n */\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (isDirective(value)) {\n        value = value(part);\n        return noChange;\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nconst isDirective = (o) => typeof o === 'function' && o.__litDirective === true;\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * @deprecated Use `noChange` instead.\n */\nexport { noChange as directiveValue };\nconst isPrimitiveValue = (value) => value === null ||\n    !(typeof value === 'object' || typeof value === 'function');\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n        this._previousValues = [];\n    }\n    _interpolate(values, startIndex) {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const v = getValue(this, values[startIndex + i]);\n            if (v && v !== noChange &&\n                (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                for (const t of v) {\n                    // TODO: we need to recursively call getValue into iterables...\n                    text += t;\n                }\n            }\n            else {\n                text += v;\n            }\n        }\n        return text + strings[l];\n    }\n    _equalToPreviousValues(values, startIndex) {\n        for (let i = startIndex; i < startIndex + this.size; i++) {\n            if (this._previousValues[i] !== values[i] ||\n                !isPrimitiveValue(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setValue(values, startIndex) {\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n            if (Array.isArray(value)) {\n                value = value.join('');\n            }\n        }\n        else {\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== noChange) {\n            this.element.setAttribute(this.name, value);\n        }\n        this._previousValues = values;\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitiveValue(value)) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        if (this._previousValue === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        value = value === undefined ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        const template = this.instance._getTemplate(value);\n        let instance;\n        if (this._previousValue && this._previousValue.template === template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance = new TemplateInstance(template, this.instance._partCallback, this.instance._getTemplate);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        this._previousValue = value;\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (!part) {\n                valueIndex++;\n            }\n            else if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        // Clone the node, rather than importing it, to keep the fragment in the\n        // template's document. This leaves the fragment inert so custom elements\n        // won't upgrade until after the main document adopts the node.\n        const fragment = this.template.element.content.cloneNode(true);\n        const parts = this.template.parts;\n        if (parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            let index = -1;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                const partActive = isTemplatePartActive(part);\n                // An inactive part has no coresponding Template node.\n                if (partActive) {\n                    while (index < part.index) {\n                        index++;\n                        walker.nextNode();\n                    }\n                }\n                this._parts.push(partActive ? this._partCallback(this, part, walker.currentNode) : undefined);\n            }\n        }\n        return fragment;\n    }\n}\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, defaultPartCallback, noChange, getValue, SVGTemplateResult, TemplateResult } from '../lit-html.js';\nexport { render } from '../lit-html.js';\n/**\n * Interprets a template literal as a lit-extended HTML template.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', extendedPartCallback);\n/**\n * Interprets a template literal as a lit-extended SVG template.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', extendedPartCallback);\n/**\n * A PartCallback which allows templates to set properties and declarative\n * event handlers.\n *\n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n *\n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n *\n * Example:\n *\n *     html`<button class$=\"primary\">Buy Now</button>`\n *\n * To set an event handler, prefix the attribute name with `on-`:\n *\n * Example:\n *\n *     html`<button on-click=${(e)=> this.onClickHandler(e)}>Buy Now</button>`\n *\n */\nexport const extendedPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        if (templatePart.rawName.substr(0, 3) === 'on-') {\n            const eventName = templatePart.rawName.slice(3);\n            return new EventPart(instance, node, eventName);\n        }\n        const lastChar = templatePart.name.substr(templatePart.name.length - 1);\n        if (lastChar === '$') {\n            const name = templatePart.name.slice(0, -1);\n            return new AttributePart(instance, node, name, templatePart.strings);\n        }\n        if (lastChar === '?') {\n            const name = templatePart.name.slice(0, -1);\n            return new BooleanAttributePart(instance, node, name, templatePart.strings);\n        }\n        return new PropertyPart(instance, node, templatePart.rawName, templatePart.strings);\n    }\n    return defaultPartCallback(instance, templatePart, node);\n};\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            const value = getValue(this, values[startIndex]);\n            if (value === noChange) {\n                return;\n            }\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        else {\n            throw new Error('boolean attributes can only contain a single expression');\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        let value;\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n        }\n        else {\n            // Interpolation, so interpolate\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== noChange) {\n            this.element[this.name] = value;\n        }\n        this._previousValues = values;\n    }\n}\nexport class EventPart {\n    constructor(instance, element, eventName) {\n        this.instance = instance;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        const listener = getValue(this, value);\n        if (listener === this._listener) {\n            return;\n        }\n        if (listener == null) {\n            this.element.removeEventListener(this.eventName, this);\n        }\n        else if (this._listener == null) {\n            this.element.addEventListener(this.eventName, this);\n        }\n        this._listener = listener;\n    }\n    handleEvent(event) {\n        if (typeof this._listener === 'function') {\n            this._listener.call(this.element, event);\n        }\n        else if (typeof this._listener.handleEvent === 'function') {\n            this._listener.handleEvent(event);\n        }\n    }\n}\n//# sourceMappingURL=lit-extended.js.map","\nimport {html} from 'lit-html/lib/lit-extended';\n\nexport const DEFAULT_TEMPLATE = (data, eventHandlers, orientation) => html`\n  <div style=\"${boxCSS}\">\n    <span style=${closeButtonCSS}\" on-click=${eventHandlers.close}>x</span>\n    <h3 style=\"font-weight:bold\">${data.title}</h3>\n    <div>${data.content}</div>\n    <div class=\"controls\" style=\"overflow: hidden; padding: 10px;\">\n      <span class=\"actions\" style=\"float: right\">\n        <button on-click=${eventHandlers.previous}>Previous</button>\n        <button on-click=${eventHandlers.next}>Next</button>\n      </span>\n    </div>\n  </div>\n`;\n\nexport const DEFAULT_WRAPPER_CSS = `\n  position: absolute;\n  z-index: 999999999999999;\n`;\n\nconst boxCSS = `\n  background-color: white;\n  color: black;\n  padding: 15px;\n  box-shadow: 0px 0px 9px #636363;\n  max-width:300px;\n`;\n\nconst closeButtonCSS = `\n  float: right;\n  position: relative;\n  cursor: pointer;\n  top: -5px;\n  padding: 5px;\n  color: #aaa;\n`\n\nlet arrowCSS = orientation => {\n  const COLOR = 'grey'\n\n  switch (orientation) {\n    case 'bottom':\n      return `\n            width: 0; \n            height: 0; \n            border-left: 5px solid transparent;\n            border-right: 5px solid transparent;\n            border-bottom: 5px solid ${COLOR};\n          `;\n    case 'top':\n      return `\n            width: 0; \n            height: 0; \n            border-left: 20px solid transparent;\n            border-right: 20px solid transparent;\n            border-top: 20px solid ${COLOR};\n          `;\n\n    case 'left':\n      return `\n            width: 0; \n            height: 0; \n            border-top: 60px solid transparent;\n            border-bottom: 60px solid transparent;\n            border-left: 60px solid ${COLOR};\n          `;\n\n    case 'right':\n      return `\n            width: 0; \n            height: 0; \n            border-top: 10px solid transparent;\n            border-bottom: 10px solid transparent; \n            \n            border-right:10px solid ${COLOR}; \n          `;\n  }\n};","import { createElement } from './utils/dom';\nimport { horizontalCenter, verticalCenter } from './utils/orientation';\nimport {render} from 'lit-html/lib/lit-extended';\nimport {DEFAULT_TEMPLATE, DEFAULT_WRAPPER_CSS} from './defaults'\n\n\nexport default class TourBox {\n  offsetX = 10;\n  offsetY = 10;\n\n  constructor(tour, template, wrapperCSS) {\n    // Initialize the class properties\n    this.tour = tour;\n    this.template = template || DEFAULT_TEMPLATE;\n    this.wrapperCSS = wrapperCSS || DEFAULT_WRAPPER_CSS;\n\n    // Setup the event handlers\n    this.eventHandlers = {\n      close: this.tour.stop.bind(this.tour),\n      next: this.tour.nextStep.bind(this.tour),\n      previous: this.tour.previousStep.bind(this.tour)\n    }\n\n    // Create the wrapper div\n    this.wrapper = createElement('div', this.wrapperCSS);\n  }\n\n  render(data) {\n    render(this.template(data, this.eventHandlers), this.wrapper);\n  }\n\n  cleanup(){\n    this.wrapper.remove()\n  }\n\n  goToPosition(x, y) {\n    this.wrapper.style.left = `${x}px`;\n    this.wrapper.style.top = `${y}px`;\n  }\n\n  goToElement(target, orientation='bottom') {\n    let targetRect = target.getBoundingClientRect();\n    let wrapperRect = this.wrapper.getBoundingClientRect();\n    let bodyRect = document.body.getBoundingClientRect();\n\n    // Compute base positions (the absolute x and y of the upper left corner)\n    let baseX = targetRect.x - bodyRect.x;\n    let baseY = targetRect.y - bodyRect.y;\n\n    // Calculate the shift (how much to move relative to the base position based) based on the orientation\n    let {horizontalShift, verticalShift} = this.calculateRelativeShift(orientation, targetRect, wrapperRect)\n\n    // Go to the computed position\n    let newX = baseX + horizontalShift;\n    let newY =  baseY + verticalShift\n    this.goToPosition(newX, newY);\n\n    // Check that the width/height didn't change in the process (if they did we need to rerun again since cerntering will be thrown off)\n    // Explanation: Sometimes the browser will rerender the div when you move it to help fit its contents in the viewport (ie if you try to smush the tour div onto the right side of the screen partially, it'll resize to fit)\n    let newWrapperRect = this.wrapper.getBoundingClientRect()\n    if(wrapperRect.width !==  newWrapperRect.width || wrapperRect.height !== newWrapperRect.height){\n      console.log('Looks like the browser decided to screww us over...')\n      this.goToElement(target, orientation)\n    }\n  }\n\n  calculateRelativeShift(orientation, targetRect, wrapperRect){\n    let horizontalShift = 0;\n    let verticalShift = 0;\n    \n    switch (orientation){\n      case 'bottom':\n        horizontalShift += horizontalCenter(targetRect) - horizontalCenter(wrapperRect);\n        verticalShift += targetRect.height + this.offsetY;\n        break;\n      case 'top':\n        horizontalShift += horizontalCenter(targetRect) - horizontalCenter(wrapperRect);\n        verticalShift -= wrapperRect.height + this.offsetY\n        break;\n      case 'left':\n        verticalShift += verticalCenter(targetRect) - verticalCenter(wrapperRect)\n        horizontalShift -= wrapperRect.width + this.offsetX\n        break;\n      case 'right': \n      verticalShift += verticalCenter(targetRect) - verticalCenter(wrapperRect)\n      horizontalShift += targetRect.width + this.offsetX\n      break;\n    }\n  \n    return {horizontalShift, verticalShift}\n  }\n}","import Mask from \"./Mask\";\nimport TourBox from \"./TourBox\";\n\nexport default class Tour {\n  constructor(steps = [], config = {}) {\n    // Initialize the class\n    this.steps = steps;\n    \n    this.steps.forEach(step => {\n      step.target = typeof step.target === 'string' ? document.querySelector(step.target) : step.target\n    })\n    \n    this.config = config;\n    this.mask = new Mask({ alpha: 0.5 });\n    this.tourBox = new TourBox(this);\n    this.currentStep = 0;\n\n    window.addEventListener('resize', evt => {\n      // Reinitialize the mask canvas\n      this.mask.resizeCanvasToFillBody()\n      // Rerender the current step\n      this.displayCurrentStep()\n    })\n  }\n\n  displayStep(step) {\n    // Run before hook\n    if(step.before){\n      step.before();\n    }\n\n    // Display the step\n    this.tourBox.render(step.data);\n    this.tourBox.goToElement(step.target);\n    this.mask.mask(step.target);\n\n\n    // Run the after hook\n    if(step.after){\n      step.after();\n    }\n  }\n\n  displayCurrentStep() {\n    this.displayStep(this.steps[this.currentStep]);\n  }\n\n  start() {\n    // Display the first step\n    this.displayCurrentStep();\n\n    // Return a promise\n    return new Promise((resolve, reject) => {\n      this.promiseResolve = resolve;\n      this.promiseReject = reject;\n    });\n  }\n\n  nextStep() {\n    if (++this.currentStep < this.steps.length) {\n      this.displayCurrentStep();\n    } else {\n      this.done();\n    }\n  }\n\n  previousStep() {\n    if (--this.currentStep > -1) {\n      this.displayCurrentStep();\n    }\n  }\n\n  cleanup() {\n    this.tourBox.cleanup();\n    this.mask.cleanup();\n  }\n\n  done() {\n    this.cleanup();\n    this.promiseResolve(\"Done :)\");\n  }\n\n  stop() {\n    this.cleanup();\n    this.promiseReject(\"Tour closed by user\");\n  }\n}","import Tour from '../src/Tour.js'\n\nvar myTour = window.myTour = {\n  canExit: true,\n  steps: [{\n    target: '#features',\n    data: {\n      content: \"Let's take a look at some features!\"\n    }\n  }, {\n    target: '#feature1',\n    data: { content: \"No matter the browser size, I'm always in the right spot. Try resizing!\"}\n  }, {\n    target: '#feature2',\n    data: { content: \"By default, Tour puts your tooltips in the perfect spot, automagically!\"}\n  }, {\n    target: '#feature3',\n    data: { content: \"Promises are built in by default along with powerful before and after hooks for each step!\"}\n  }, {\n    target: '#feature4',\n    data: { content: \"Unlike intro.js, ng-joyride, and others, Tour.js will NOT relayer your elements, shuffle your z-indices or manipulate your existing DOM in any way.\"}\n  }, {\n    target: '#vader',\n    data: { content: \"Luke, come to the dark side... it's easily themable ;)\"},\n    before: function() {\n      console.log('Before works!')\n    },\n    after: function() {\n      console.log('After works')\n    }\n  }, {\n    target: '#installation',\n    data: { content: \"Installation is a breeze, and Tour.js is a lightweight (weighing in at about 12kb gzipped!)\"}\n  }, {\n    target: '#usage',\n    data: { content: \"Tours are ridiculously easy to build.\"}\n  }, {\n    target: '#config',\n    data: { content: \"And customization is a snap! These are the defaults which you can override globally, per tour, or per step.\"}\n  }, {\n    target: '#api',\n    data: { content: \"A clean and simple API to get the job done.\"}\n  }, {\n    target: '#promises',\n    data: { content: \"Built in hooks let you fine-tune and control your app state as the tour progresses!\"}\n  }, {\n    target: '#forkme_banner',\n    data: { content: \"I'll let you take it from here. <h4 style='text-align:right'><strong><3 <a href='http://github.com/tourjs'>tourjs</a></h4> \"}\n  }]\n}\n\nlet tour = new Tour(myTour.steps)\nconsole.log({tour})\ntour.start();\n\nif (module.hot) {\n  module.hot.dispose(function () {\n    tour.done()\n  });\n\n  module.hot.accept(function () {\n    tour.start();\n  });\n}"]}